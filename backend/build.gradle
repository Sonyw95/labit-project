plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'kr.labit'
version = '0.0.1-SNAPSHOT'


ext.javaEncoding = 'UTF-8'
ext.gradleVersion = '8.14.2'
ext.targetServer = project.hasProperty('target') ? target : 'dev'
ext.osName = System.getProperty("os.name").contains('Window') ? 'window' : 'linux'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(JavaVersion.VERSION_21 as String)
    }
}

war {
    manifest {
        attributes  'Implementation-Title': archiveBaseName,
                'Implementation-Version': version,
                'System-JDK': "${System.getProperty('java.version')} (${System.getProperty('java.specification.vendor')})",
                'Build-JDK-Version': JavaVersion.VERSION_21,
                'Gradle-Version': gradleVersion,
                'Created-By': 'sonyw32@naver.com',
                'Create-Date': new Date().format('yyyy-MM-dd HH:mm:ss').toString()
    }
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
configurations.configureEach {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

tasks.register('Wrapper', Wrapper) {
    description = 'Generates gradlew[.bat] scripts'
    gradleVersion = gradleVersion
}
repositories {
    mavenCentral()
}

// OS 탐지
static def getOsName(){
    def osName = System.getProperty("os.name").toLowerCase()
    if( osName.contains("window") ){
        return "window"
    }else if(osName.contains('linux') ){
        return 'linux'
    }else if(osName.contains('mac')){
        return 'linux'
    }
    return 'unknown'
}

tasks.register('copyPropertiesForOs') {
    doLast{
        def osName = getOsName()
        def sourceDir = file("src/main/resources")
        def targetFile = file("${sourceDir}/application.properties")

        if( targetFile.exists() ){
            copy {
                from targetFile
                into sourceDir
                rename {"application.properties.backup"}
            }
        }
        if( osName === 'unknown' ){
            println("지원되지 않는 OS ${System.getProperty("os.name")}")
        }else{
            def serverPropsFile = file("src/main/resources/properties-${targetServer}-${osName}/application.properties")
            if( serverPropsFile.exists() ){
                copy{
                    from serverPropsFile
                    into sourceDir
                    println("Copy Success Os Server Properties")
                }
            }else {
                println("Os Server Properties File Not Found")
            }
        }
    }
}

bootRun{
    dependsOn(copyPropertiesForOs)
    systemProperties( System.properties )
}
clean {
    doLast{
        delete fileTree("src/main/resources"){
            include("application.properties.backup")
        }
    }
}
dependencies {

////    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
//    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // Oracle Database
    implementation 'com.oracle.database.jdbc:ojdbc11:23.3.0.23.09'
    implementation 'com.oracle.database.security:oraclepki:21.5.0.0'
    implementation 'com.oracle.database.security:osdt_cert:21.5.0.0'
    implementation 'com.oracle.database.security:osdt_core:21.5.0.0'

    // Development
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Lombok
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    compileOnly 'org.projectlombok:lombok:1.18.30'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Session DB
//    implementation group: 'org.springframework.session', name: 'spring-session-jdbc', version: '2.1.7.RELEASE'
//    implementation group: 'org.springframework', name: 'spring-context-support', version: '5.1.5.RELEASE'

    // XSS
    implementation group: 'com.navercorp.lucy', name: 'lucy-xss', version: '1.6.3'
    implementation group: 'com.navercorp.lucy', name: 'lucy-xss-servlet', version: '2.0.0'

    // Json
//    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'
//    implementation "com.googlecode.json-simple:json-simple:1.1"
//    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.11.0'
//    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.0'
//    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.4.2'
//    implementation group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-json-provider', version: '2.9.2'
//    implementation group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-base', version: '2.4.0'
//    implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-jaxb-annotations', version: '2.4.0'

    // slf4j
//    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.5'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

