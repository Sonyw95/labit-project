import React, { useState, useEffect } from 'react';
import {
    Container,
    Text,
    Stack,
    Group,
    Avatar,
    Badge,
    ActionIcon,
    Divider,
    Box,
    Paper,
    Affix,
    Transition,
    Progress,
    Tooltip,
    Button,
    useMantineColorScheme,
    useComputedColorScheme,
    Anchor,
    Card
} from '@mantine/core';
import {
    IconHeart,
    IconBookmark,
    IconShare2,
    IconMessageCircle,
    IconEye,
    IconCalendar,
    IconClock,
    IconUser,
    IconArrowLeft,
    IconArrowUp,
    IconSun,
    IconMoon,
    IconChevronUp,
    IconChevronDown,
    IconBrandTwitter,
    IconBrandFacebook,
    IconBrandLinkedin,
    IconCopy
} from '@tabler/icons-react';

// Îã§ÌÅ¨ Î™®Îìú ÌÜ†Í∏Ä Ïª¥Ìè¨ÎÑåÌä∏
function DarkModeToggle() {
    const { setColorScheme } = useMantineColorScheme();
    const computedColorScheme = useComputedColorScheme('light', { getInitialValueInEffect: true });
    const [isHovered, setIsHovered] = useState(false);
    const [comments, setComments] = useState([
        {
            id: 1,
            author: {
                name: "Ïù¥Í∞úÎ∞úÏûê",
                avatar: "https://images.unsplash.com/photo-1494790108755-2616b612b786?w=40&h=40&fit=crop&crop=face",
                badge: "ÌîÑÎ°†Ìä∏ÏóîÎìú Í∞úÎ∞úÏûê",
                badgeColor: "blue",
                verified: true
            },
            content: "Ï†ïÎßê Ïù∏ÏÇ¨Ïù¥Ìä∏Í∞Ä Í∞ÄÎìùÌïú Ìè¨Ïä§Ìä∏ÎÑ§Ïöî! ÌäπÌûà 2025ÎÖÑ Ïõπ ÎîîÏûêÏù∏ Ìä∏Î†åÎìú Ï§ëÏóêÏÑú Ïã§ÌóòÏ†Å ÎÇ¥ÎπÑÍ≤åÏù¥ÏÖò Î∂ÄÎ∂ÑÏù¥ Í∞ÄÏû• Ìù•ÎØ∏Î°úÏõ†ÏäµÎãàÎã§. Ïã§Ï†ú ÌîÑÎ°úÏ†ùÌä∏Ïóê Ï†ÅÏö©Ìï¥Î≥º ÎßåÌïú ÏïÑÏù¥ÎîîÏñ¥Îì§Ïù¥ ÎßéÏïÑÏÑú ÎèÑÏõÄÏù¥ ÎêòÏóàÏñ¥Ïöî. üëç",
            timestamp: "2ÏãúÍ∞Ñ Ï†Ñ",
            likes: 12,
            replies: [
                {
                    id: 11,
                    author: {
                        name: "ÍπÄÎîîÏûêÏù¥ÎÑà",
                        avatar: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=32&h=32&fit=crop&crop=face",
                        badge: "ÏûëÏÑ±Ïûê",
                        badgeColor: "violet",
                        verified: true
                    },
                    content: "@Ïù¥Í∞úÎ∞úÏûê Í∞êÏÇ¨Ìï©ÎãàÎã§! Ïã§ÌóòÏ†Å ÎÇ¥ÎπÑÍ≤åÏù¥ÏÖòÏùÄ Ï†ïÎßê 2025ÎÖÑÏùò ÌïµÏã¨ Ìä∏Î†åÎìú Ï§ë ÌïòÎÇòÎùºÍ≥† ÏÉùÍ∞ÅÌï¥Ïöî. Îã§Îßå ÏÇ¨Ïö©Ïûê Í≤ΩÌóòÏùÑ Ìï¥ÏπòÏßÄ ÏïäÎäî ÏÑ†ÏóêÏÑú Ï†ÅÏö©ÌïòÎäî Í≤å Ï§ëÏöîÌïòÍ≤†Ï£†. üé®",
                    timestamp: "1ÏãúÍ∞Ñ Ï†Ñ",
                    likes: 8
                }
            ]
        },
        {
            id: 2,
            author: {
                name: "Î∞ïUX",
                avatar: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=40&h=40&fit=crop&crop=face",
                badge: "UX ÎîîÏûêÏù¥ÎÑà",
                badgeColor: "green",
                verified: false
            },
            content: "ÏßÄÏÜçÍ∞ÄÎä•Ìïú Ïõπ ÎîîÏûêÏù∏ Ìä∏Î†åÎìúÍ∞Ä ÌäπÌûà Ïù∏ÏÉÅÏ†ÅÏù¥ÏóàÏñ¥Ïöî. ÌôòÍ≤ΩÏùÑ Í≥†Î†§Ìïú ÎîîÏûêÏù∏Ïù¥ Îã®ÏàúÌûà Ìä∏Î†åÎìúÎ•º ÎÑòÏñ¥ ÌïÑÏàòÍ∞Ä ÎêòÏñ¥Í∞ÄÎäî Í≤É Í∞ôÏäµÎãàÎã§. ÏÑ±Îä• ÏµúÏ†ÅÌôîÏôÄ ÌôòÍ≤Ω Î≥¥Ìò∏Î•º ÎèôÏãúÏóê Îã¨ÏÑ±Ìï† Ïàò ÏûàÎã§Îäî Ï†êÏù¥ Îß§Î†•Ï†ÅÏù¥ÎÑ§Ïöî! üå±",
            timestamp: "3ÏãúÍ∞Ñ Ï†Ñ",
            likes: 15,
            replies: []
        },
        {
            id: 3,
            author: {
                name: "Ï†ïÌíÄÏä§ÌÉù",
                avatar: "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=40&h=40&fit=crop&crop=face",
                badge: "ÌíÄÏä§ÌÉù Í∞úÎ∞úÏûê",
                badgeColor: "orange",
                verified: true
            },
            content: "ÎßàÏù¥ÌÅ¨Î°ú Ïï†ÎãàÎ©îÏù¥ÏÖò Î∂ÄÎ∂ÑÏù¥ Ï†ïÎßê Ïú†Ïö©ÌñàÏñ¥Ïöî! ÏöîÏ¶ò ÌîÑÎ°úÏ†ùÌä∏ÏóêÏÑú ÏÇ¨Ïö©Ïûê Í≤ΩÌóòÏùÑ ÏúÑÌï¥ Ïï†ÎãàÎ©îÏù¥ÏÖòÏùÑ ÎßéÏù¥ ÎèÑÏûÖÌïòÍ≥† ÏûàÎäîÎç∞, Í≥ºÎèÑÌïòÏßÄ ÏïäÏúºÎ©¥ÏÑúÎèÑ ÏùòÎØ∏ÏûàÎäî Ïï†ÎãàÎ©îÏù¥ÏÖòÏùÑ Íµ¨ÌòÑÌïòÎäî Î∞©Î≤ïÏóê ÎåÄÌï¥ Í≥†ÎØºÏù¥ ÎßéÏïòÍ±∞Îì†Ïöî. üöÄ",
            timestamp: "4ÏãúÍ∞Ñ Ï†Ñ",
            likes: 9,
            replies: []
        }
    ]);


    const toggleColorScheme = () => {
        setColorScheme(computedColorScheme === 'light' ? 'dark' : 'light');
    };

    return (
        <Tooltip
            label={computedColorScheme === 'light' ? 'Îã§ÌÅ¨ Î™®ÎìúÎ°ú Ï†ÑÌôò' : 'ÎùºÏù¥Ìä∏ Î™®ÎìúÎ°ú Ï†ÑÌôò'}
            position="left"
        >
            <ActionIcon
                onClick={toggleColorScheme}
                variant="gradient"
                gradient={
                    computedColorScheme === 'light'
                        ? { from: 'indigo', to: 'purple', deg: 135 }
                        : { from: 'yellow', to: 'orange', deg: 135 }
                }
                size="lg"
                style={{
                    border: `2px solid ${computedColorScheme === 'light' ? 'rgba(255,255,255,0.2)' : 'rgba(0,0,0,0.2)'}`,
                    backdropFilter: 'blur(10px)',
                    boxShadow: computedColorScheme === 'light'
                        ? '0 8px 32px rgba(0, 0, 0, 0.15)'
                        : '0 8px 32px rgba(255, 255, 255, 0.1)',
                    transform: isHovered ? 'scale(1.1) rotate(180deg)' : 'scale(1) rotate(0deg)',
                    transition: 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)',
                }}
                onMouseEnter={() => setIsHovered(true)}
                onMouseLeave={() => setIsHovered(false)}
            >
                {computedColorScheme === 'light' ? <IconMoon size={18} /> : <IconSun size={18} />}
            </ActionIcon>
        </Tooltip>
    );
}

const handleCommentSubmit = (commentText) => {
    const newComment = {
        id: Date.now(),
        author: {
            name: "ÌòÑÏû¨ÏÇ¨Ïö©Ïûê",
            avatar: "https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?w=40&h=40&fit=crop&crop=face",
            badge: "ÏÉàÎ°úÏö¥ Î©§Î≤Ñ",
            badgeColor: "cyan",
            verified: false
        },
        content: commentText,
        timestamp: "Î∞©Í∏à Ï†Ñ",
        likes: 0,
        replies: []
    };
    setComments([newComment, ...comments]);
};

// ÎåìÍ∏Ä ÏûÖÎ†• Ìèº
function CommentForm({ onSubmit }) {
    const [comment, setComment] = useState('');
    const [isSubmitting, setIsSubmitting] = useState(false);
    const computedColorScheme = useComputedColorScheme('light');

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!comment.trim()) {
            return false;
        }

        setIsSubmitting(true);
        await new Promise(resolve => setTimeout(resolve, 1000));
        onSubmit(comment);
        setComment('');
        setIsSubmitting(false);
    };

    return (
        <Paper
            p="lg"
            mb="xl"
            style={{
                background: computedColorScheme === 'light'
                    ? 'rgba(255, 255, 255, 0.95)'
                    : 'rgba(30, 30, 30, 0.95)',
                backdropFilter: 'blur(20px)',
                border: computedColorScheme === 'light'
                    ? '1px solid rgba(0, 0, 0, 0.1)'
                    : '1px solid rgba(255, 255, 255, 0.1)',
                borderRadius: '20px',
                boxShadow: computedColorScheme === 'light'
                    ? '0 8px 32px rgba(0, 0, 0, 0.08)'
                    : '0 8px 32px rgba(255, 255, 255, 0.02)'
            }}
        >
            <form onSubmit={handleSubmit}>
                <Group align="flex-start" gap="md">
                    <Avatar
                        src="https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?w=50&h=50&fit=crop&crop=face"
                        size="lg"
                        style={{
                            border: '3px solid rgba(99, 102, 241, 0.3)',
                            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)'
                        }}
                    />
                    <Stack gap="md" style={{ flex: 1 }}>
                        <Textarea
                            placeholder="Ïù¥ Ìè¨Ïä§Ìä∏Ïóê ÎåÄÌïú ÏÉùÍ∞ÅÏùÑ Í≥µÏú†Ìï¥Î≥¥ÏÑ∏Ïöî..."
                            value={comment}
                            onChange={(e) => setComment(e.target.value)}
                            minRows={3}
                            maxRows={6}
                            autosize
                            style={{
                                '& .mantine-Textarea-input': {
                                    background: computedColorScheme === 'light'
                                        ? 'rgba(249, 250, 251, 0.8)'
                                        : 'rgba(40, 40, 40, 0.8)',
                                    border: computedColorScheme === 'light'
                                        ? '1px solid rgba(0, 0, 0, 0.1)'
                                        : '1px solid rgba(255, 255, 255, 0.1)',
                                    borderRadius: '12px',
                                    fontSize: '14px',
                                    lineHeight: 1.6
                                }
                            }}
                        />
                        <Group justify="space-between" align="center">
                            <Group gap="xs">
                                <ActionIcon variant="subtle" size="sm">
                                    <IconPhoto size={18} />
                                </ActionIcon>
                                <Text size="xs" c="dimmed">Ïù¥ÎØ∏ÏßÄ Ï≤®Î∂Ä</Text>
                            </Group>
                            <Button
                                type="submit"
                                variant="gradient"
                                gradient={{ from: 'violet', to: 'blue' }}
                                leftSection={<IconSend size={18} />}
                                disabled={!comment.trim()}
                                loading={isSubmitting}
                                style={{
                                    transition: 'all 0.2s ease',
                                    opacity: comment.trim() ? 1 : 0.6
                                }}
                            >
                                ÎåìÍ∏Ä ÏûëÏÑ±
                            </Button>
                        </Group>
                    </Stack>
                </Group>
            </form>
        </Paper>
    );
}

// Ìè¨Ïä§Ìä∏ ÎÑ§ÎπÑÍ≤åÏù¥ÌÑ∞ Ïª¥Ìè¨ÎÑåÌä∏
function PostNavigator({ currentProgress, onScrollTo }) {
    const computedColorScheme = useComputedColorScheme('light');
    const [activeSection, setActiveSection] = useState(0);

    const sections = [
        { id: 'intro', title: 'ÏÜåÍ∞ú', progress: 0 },
        { id: 'overview', title: 'Í∞úÏöî', progress: 20 },
        { id: 'content', title: 'Î≥∏Î¨∏', progress: 40 },
        { id: 'examples', title: 'ÏòàÏãú', progress: 60 },
        { id: 'conclusion', title: 'Í≤∞Î°†', progress: 80 },
        { id: 'comments', title: 'ÎåìÍ∏Ä', progress: 100 }
    ];

    useEffect(() => {
        const currentSection = sections.findIndex(section =>
            currentProgress >= section.progress &&
            currentProgress < (sections[sections.indexOf(section) + 1]?.progress || 100)
        );
        setActiveSection(Math.max(0, currentSection));
    }, [currentProgress]);

    return (
        <Affix position={{ top: '50%', right: 20 }} style={{ transform: 'translateY(-50%)' }}>
            <Paper
                p="md"
                style={{
                    background: computedColorScheme === 'light'
                        ? 'rgba(255, 255, 255, 0.95)'
                        : 'rgba(20, 20, 20, 0.95)',
                    backdropFilter: 'blur(20px)',
                    border: computedColorScheme === 'light'
                        ? '1px solid rgba(0, 0, 0, 0.1)'
                        : '1px solid rgba(255, 255, 255, 0.1)',
                    borderRadius: '16px',
                    boxShadow: computedColorScheme === 'light'
                        ? '0 8px 32px rgba(0, 0, 0, 0.12)'
                        : '0 8px 32px rgba(255, 255, 255, 0.05)',
                    width: '200px'
                }}
            >
                <Stack gap="xs">
                    <Group justify="space-between" align="center" mb="xs">
                        <Text size="sm" fw={600}>Î™©Ï∞®</Text>
                        <DarkModeToggle />
                    </Group>

                    <Progress
                        value={currentProgress}
                        size="xs"
                        radius="xl"
                        style={{ marginBottom: '8px' }}
                    />

                    {sections.map((section, index) => (
                        <Box
                            key={section.id}
                            style={{
                                padding: '8px 12px',
                                borderRadius: '8px',
                                cursor: 'pointer',
                                background: activeSection === index
                                    ? computedColorScheme === 'light'
                                        ? 'rgba(34, 139, 230, 0.1)'
                                        : 'rgba(34, 139, 230, 0.2)'
                                    : 'transparent',
                                border: activeSection === index
                                    ? '1px solid rgba(34, 139, 230, 0.3)'
                                    : '1px solid transparent',
                                transition: 'all 0.2s ease'
                            }}
                            onClick={() => onScrollTo(section.progress)}
                        >
                            <Text
                                size="xs"
                                c={activeSection === index ? 'blue' : 'dimmed'}
                                fw={activeSection === index ? 600 : 400}
                            >
                                {section.title}
                            </Text>
                        </Box>
                    ))}
                </Stack>
            </Paper>
        </Affix>
    );
}

// ÌîåÎ°úÌåÖ Ïï°ÏÖò Î≤ÑÌäº
function FloatingActions() {
    const [isLiked, setIsLiked] = useState(false);
    const [isBookmarked, setIsBookmarked] = useState(false);
    const [showScrollTop, setShowScrollTop] = useState(false);
    const computedColorScheme = useComputedColorScheme('light');

    useEffect(() => {
        const handleScroll = () => {
            setShowScrollTop(window.scrollY > 300);
        };
        window.addEventListener('scroll', handleScroll);
        return () => window.removeEventListener('scroll', handleScroll);
    }, []);

    const scrollToTop = () => {
        window.scrollTo({ top: 0, behavior: 'smooth' });
    };

    const shareActions = [
        { icon: IconBrandTwitter, label: 'Twitter', color: '#1DA1F2' },
        { icon: IconBrandFacebook, label: 'Facebook', color: '#4267B2' },
        { icon: IconBrandLinkedin, label: 'LinkedIn', color: '#0077B5' },
        { icon: IconCopy, label: 'ÎßÅÌÅ¨ Î≥µÏÇ¨', color: '#666' }
    ];

    return (
        <Affix position={{ bottom: 20, left: 20 }}>
            <Stack gap="xs">
                {/* Í≥µÏú† Î≤ÑÌäºÎì§ */}
                <Paper
                    p="xs"
                    style={{
                        background: computedColorScheme === 'light'
                            ? 'rgba(255, 255, 255, 0.95)'
                            : 'rgba(20, 20, 20, 0.95)',
                        backdropFilter: 'blur(20px)',
                        border: computedColorScheme === 'light'
                            ? '1px solid rgba(0, 0, 0, 0.1)'
                            : '1px solid rgba(255, 255, 255, 0.1)',
                        borderRadius: '16px',
                        boxShadow: computedColorScheme === 'light'
                            ? '0 8px 32px rgba(0, 0, 0, 0.12)'
                            : '0 8px 32px rgba(255, 255, 255, 0.05)'
                    }}
                >
                    <Stack gap="xs">
                        {shareActions.map(({ icon: Icon, label, color }) => (
                            <Tooltip key={label} label={label} position="right">
                                <ActionIcon
                                    variant="subtle"
                                    size="lg"
                                    style={{
                                        transition: 'all 0.2s ease',
                                        '&:hover': {
                                            background: color + '20',
                                            transform: 'scale(1.1)'
                                        }
                                    }}
                                >
                                    <Icon size={20} color={color} />
                                </ActionIcon>
                            </Tooltip>
                        ))}

                        <Divider size="xs" />

                        {/* Ï¢ãÏïÑÏöî Î≤ÑÌäº */}
                        <Tooltip label={isLiked ? 'Ï¢ãÏïÑÏöî Ï∑®ÏÜå' : 'Ï¢ãÏïÑÏöî'} position="right">
                            <ActionIcon
                                variant={isLiked ? "filled" : "subtle"}
                                color={isLiked ? "red" : "gray"}
                                size="lg"
                                onClick={() => setIsLiked(!isLiked)}
                                style={{
                                    transition: 'all 0.2s ease',
                                    transform: isLiked ? 'scale(1.1)' : 'scale(1)'
                                }}
                            >
                                <IconHeart size={20} fill={isLiked ? "currentColor" : "none"} />
                            </ActionIcon>
                        </Tooltip>

                        {/* Î∂ÅÎßàÌÅ¨ Î≤ÑÌäº */}
                        <Tooltip label={isBookmarked ? 'Î∂ÅÎßàÌÅ¨ Ìï¥Ï†ú' : 'Î∂ÅÎßàÌÅ¨'} position="right">
                            <ActionIcon
                                variant={isBookmarked ? "filled" : "subtle"}
                                color={isBookmarked ? "yellow" : "gray"}
                                size="lg"
                                onClick={() => setIsBookmarked(!isBookmarked)}
                                style={{
                                    transition: 'all 0.2s ease',
                                    transform: isBookmarked ? 'scale(1.1)' : 'scale(1)'
                                }}
                            >
                                <IconBookmark size={20} fill={isBookmarked ? "currentColor" : "none"} />
                            </ActionIcon>
                        </Tooltip>
                    </Stack>
                </Paper>

                {/* Îß® ÏúÑÎ°ú Î≤ÑÌäº */}
                <Transition mounted={showScrollTop} transition="slide-up" duration={200}>
                    {(styles) => (
                        <ActionIcon
                            style={{
                                ...styles,
                                background: 'linear-gradient(135deg, var(--mantine-color-blue-6), var(--mantine-color-violet-6))',
                                backdropFilter: 'blur(20px)',
                                border: computedColorScheme === 'light'
                                    ? '1px solid rgba(0, 0, 0, 0.1)'
                                    : '1px solid rgba(255, 255, 255, 0.1)',
                                borderRadius: '50%',
                                boxShadow: computedColorScheme === 'light'
                                    ? '0 8px 32px rgba(0, 0, 0, 0.12)'
                                    : '0 8px 32px rgba(255, 255, 255, 0.05)'
                            }}
                            size="xl"
                            onClick={scrollToTop}
                        >
                            <IconArrowUp size={24} color="white" />
                        </ActionIcon>
                    )}
                </Transition>
            </Stack>
        </Affix>
    );
}

// Î©îÏù∏ Ìè¨Ïä§Ìä∏ ÏÉÅÏÑ∏ Ïª¥Ìè¨ÎÑåÌä∏
export default function PostDetail() {
    const [scrollProgress, setScrollProgress] = useState(0);
    const computedColorScheme = useComputedColorScheme('light');

    // Ïä§ÌÅ¨Î°§ ÏßÑÌñâÎ•† Ï∂îÏ†Å
    useEffect(() => {
        const handleScroll = () => {
            const scrollTop = window.scrollY;
            const docHeight = document.documentElement.scrollHeight - window.innerHeight;
            const progress = Math.min((scrollTop / docHeight) * 100, 100);
            setScrollProgress(progress);
        };

        window.addEventListener('scroll', handleScroll);
        return () => window.removeEventListener('scroll', handleScroll);
    }, []);

    const handleScrollTo = (targetProgress) => {
        const docHeight = document.documentElement.scrollHeight - window.innerHeight;
        const targetPosition = (targetProgress / 100) * docHeight;
        window.scrollTo({ top: targetPosition, behavior: 'smooth' });
    };

    const post = {
        title: "2025ÎÖÑ Ïõπ ÎîîÏûêÏù∏ Ìä∏Î†åÎìú: ÎØ∏ÎûòÎ•º Ïù¥ÎÅÑÎäî ÌòÅÏã†Ï†ÅÏù∏ ÎîîÏûêÏù∏ Ìå®Îü¨Îã§ÏûÑ",
        subtitle: "AI Í∏∞Î∞ò Í∞úÏù∏Ìôî, ÏßÄÏÜçÍ∞ÄÎä•Ìïú ÎîîÏûêÏù∏, Í∑∏Î¶¨Í≥† Î™∞ÏûÖÌòï ÏÇ¨Ïö©Ïûê Í≤ΩÌóòÏùò ÏãúÎåÄ",
        bannerImage: "https://images.unsplash.com/photo-1558655146-9f40138edfeb?w=1200&h=600&fit=crop",
        author: {
            name: "ÍπÄÎîîÏûêÏù¥ÎÑà",
            avatar: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=80&h=80&fit=crop&crop=face",
            bio: "UX/UI ÎîîÏûêÏù¥ÎÑàÏù¥Ïûê Ïõπ Ìä∏Î†åÎìú Ï†ÑÎ¨∏Í∞Ä",
            followers: "12.5K"
        },
        publishedAt: "2025-06-25",
        readTime: "12Î∂Ñ",
        views: 3420,
        likes: 234,
        category: "ÎîîÏûêÏù∏",
        tags: ["ÏõπÎîîÏûêÏù∏", "2025Ìä∏Î†åÎìú", "UI/UX", "ÏÇ¨Ïö©ÏûêÍ≤ΩÌóò"]
    };

    return (
        <Box style={{ minHeight: '100vh' }}>
            {/* ÏßÑÌñâÎ•† ÌëúÏãúÎ∞î */}
            <Progress
                value={scrollProgress}
                size="xs"
                style={{
                    position: 'fixed',
                    top: 0,
                    left: 0,
                    right: 0,
                    zIndex: 1000
                }}
            />

            {/* Î∞∞ÎÑà Ïù¥ÎØ∏ÏßÄ ÏÑπÏÖò */}
            <Box
                style={{
                    height: '70vh',
                    backgroundImage: `url(${post.bannerImage})`,
                    backgroundSize: 'cover',
                    backgroundPosition: 'center',
                    backgroundAttachment: 'fixed',
                    position: 'relative',
                    display: 'flex',
                    alignItems: 'end',
                    padding: '0 20px 60px'
                }}
            >
                {/* Í∑∏ÎùºÎîîÏñ∏Ìä∏ Ïò§Î≤ÑÎ†àÏù¥ */}
                <Box
                    style={{
                        position: 'absolute',
                        top: 0,
                        left: 0,
                        right: 0,
                        bottom: 0,
                        background: computedColorScheme === 'light'
                            ? 'linear-gradient(180deg, rgba(0,0,0,0) 0%, rgba(0,0,0,0.3) 50%, rgba(0,0,0,0.8) 100%)'
                            : 'linear-gradient(180deg, rgba(0,0,0,0.2) 0%, rgba(0,0,0,0.6) 50%, rgba(0,0,0,0.9) 100%)',
                        backdropFilter: 'blur(1px)'
                    }}
                />

                {/* Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº */}
                <ActionIcon
                    variant="filled"
                    size="lg"
                    style={{
                        position: 'absolute',
                        top: '20px',
                        left: '20px',
                        background: 'rgba(0, 0, 0, 0.6)',
                        backdropFilter: 'blur(10px)',
                        border: '1px solid rgba(255, 255, 255, 0.2)'
                    }}
                >
                    <IconArrowLeft size={20} color="white" />
                </ActionIcon>

                {/* ÌÉÄÏù¥ÌãÄ ÏòÅÏó≠ */}
                <Container size="lg" style={{ position: 'relative', zIndex: 2, width: '100%' }}>
                    <Stack gap="md">
                        <Badge
                            color="blue"
                            variant="filled"
                            size="lg"
                            style={{
                                backdropFilter: 'blur(10px)',
                                background: 'rgba(34, 139, 230, 0.9)',
                                border: '1px solid rgba(255, 255, 255, 0.2)'
                            }}
                        >
                            {post.category}
                        </Badge>

                        <Text
                            size="3rem"
                            fw={900}
                            c="white"
                            style={{
                                fontSize: 'clamp(1.5rem, 4vw, 3rem)',
                                lineHeight: 1.2,
                                textShadow: '0 4px 20px rgba(0, 0, 0, 0.5)',
                                maxWidth: '80%'
                            }}
                        >
                            {post.title}
                        </Text>

                        <Text
                            size="xl"
                            c="rgba(255, 255, 255, 0.9)"
                            style={{
                                fontSize: 'clamp(1rem, 2vw, 1.25rem)',
                                textShadow: '0 2px 10px rgba(0, 0, 0, 0.5)',
                                maxWidth: '70%'
                            }}
                        >
                            {post.subtitle}
                        </Text>
                    </Stack>
                </Container>
            </Box>

            {/* Î©îÏù∏ ÏΩòÌÖêÏ∏† */}
            <Container size="md" py="xl">
                {/* ÏûëÏÑ±Ïûê Ï†ïÎ≥¥ */}
                <Card
                    p="lg"
                    mb="xl"
                    style={{
                        background: computedColorScheme === 'light'
                            ? 'rgba(255, 255, 255, 0.9)'
                            : 'rgba(30, 30, 30, 0.9)',
                        backdropFilter: 'blur(20px)',
                        border: computedColorScheme === 'light'
                            ? '1px solid rgba(0, 0, 0, 0.1)'
                            : '1px solid rgba(255, 255, 255, 0.1)',
                        borderRadius: '16px',
                        boxShadow: computedColorScheme === 'light'
                            ? '0 8px 32px rgba(0, 0, 0, 0.08)'
                            : '0 8px 32px rgba(255, 255, 255, 0.02)'
                    }}
                >
                    <Group justify="space-between" align="center">
                        <Group>
                            <Avatar src={post.author.avatar} size="lg" />
                            <Stack gap={4}>
                                <Text fw={600}>{post.author.name}</Text>
                                <Text size="sm" c="dimmed">{post.author.bio}</Text>
                                <Group gap="xs">
                                    <Group gap={4}>
                                        <IconCalendar size={14} />
                                        <Text size="xs" c="dimmed">{post.publishedAt}</Text>
                                    </Group>
                                    <Group gap={4}>
                                        <IconClock size={14} />
                                        <Text size="xs" c="dimmed">{post.readTime}</Text>
                                    </Group>
                                    <Group gap={4}>
                                        <IconEye size={14} />
                                        <Text size="xs" c="dimmed">{post.views.toLocaleString()}</Text>
                                    </Group>
                                </Group>
                            </Stack>
                        </Group>

                        <Stack align="center" gap={4}>
                            <Button variant="light" size="sm">ÌåîÎ°úÏö∞</Button>
                            <Text size="xs" c="dimmed">{post.author.followers} ÌåîÎ°úÏõå</Text>
                        </Stack>
                    </Group>
                </Card>

                {/* Ìè¨Ïä§Ìä∏ ÏΩòÌÖêÏ∏† */}
                <Stack gap="xl" id="content">
                    <section id="intro">
                        <Text size="lg" fw={600} mb="md">Îì§Ïñ¥Í∞ÄÎ©∞</Text>
                        <Text style={{ lineHeight: 1.8 }}>
                            2025ÎÖÑ, Ïõπ ÎîîÏûêÏù∏ ÏóÖÍ≥ÑÎäî Ï†ÑÎ°ÄÏóÜÎäî Î≥ÄÌôîÏùò Ï§ëÏã¨Ïóê ÏÑú ÏûàÏäµÎãàÎã§.
                            Î∞òÎîîÏûêÏù∏Í≥º Ïã§ÌóòÏ†Å ÎÇ¥ÎπÑÍ≤åÏù¥ÏÖòÎ∂ÄÌÑ∞
                            AI Í∏∞Î∞ò Í∞úÏù∏ÌôîÏôÄ ÏßÄÏÜçÍ∞ÄÎä•Ìïú ÎîîÏûêÏù∏ÍπåÏßÄ,
                            ÏÉàÎ°úÏö¥ Ìå®Îü¨Îã§ÏûÑÏù¥ ÏÇ¨Ïö©Ïûê Í≤ΩÌóòÏùò ÎØ∏ÎûòÎ•º Ïû¨Ï†ïÏùòÌïòÍ≥† ÏûàÏäµÎãàÎã§.
                        </Text>
                    </section>

                    <Divider />

                    <section id="overview">
                        <Text size="lg" fw={600} mb="md">2025ÎÖÑ ÌïµÏã¨ Ìä∏Î†åÎìú Í∞úÏöî</Text>
                        <Stack gap="md">
                            <Text style={{ lineHeight: 1.8 }}>
                                ÎßàÏù¥ÌÅ¨Î°ú Ïï†ÎãàÎ©îÏù¥ÏÖòÍ≥º Ïª§Ïä§ÌÖÄ Ïª§ÏÑúÎäî Îã®ÏàúÌïú Ïû•ÏãùÏùÑ ÎÑòÏñ¥
                                Î∏åÎûúÎìú ÏöîÏÜåÎ°ú ÏßÑÌôîÌïòÍ≥† ÏûàÏäµÎãàÎã§. ÏÇ¨Ïö©ÏûêÎì§ÏùÄ Îçî Ïù¥ÏÉÅ Ï†ïÏ†ÅÏù∏ ÏõπÏÇ¨Ïù¥Ìä∏Ïóê ÎßåÏ°±ÌïòÏßÄ ÏïäÏúºÎ©∞,
                                Ïù∏ÌÑ∞ÎûôÌã∞Î∏åÌïòÍ≥† Î™∞ÏûÖÏ†ÅÏù∏ Í≤ΩÌóòÏùÑ Í∏∞ÎåÄÌï©ÎãàÎã§.
                            </Text>

                            <Text style={{ lineHeight: 1.8 }}>
                                Í∞ÄÏãúÏ†Å Í∑∏Î¶¨Îìú Î†àÏù¥ÏïÑÏõÉÍ≥º
                                3D ÏöîÏÜåÏùò Ï†ëÍ∑ºÏÑ± Ìñ•ÏÉÅÏùÄ
                                ÎîîÏûêÏù¥ÎÑàÎì§ÏóêÍ≤å ÏÉàÎ°úÏö¥ Ï∞ΩÏûëÏùò ÏûêÏú†Î•º Ï†úÍ≥µÌïòÍ≥† ÏûàÏäµÎãàÎã§.
                            </Text>
                        </Stack>
                    </section>

                    <Divider />

                    <section id="examples">
                        <Text size="lg" fw={600} mb="md">Ïã§Ï†ú Ï†ÅÏö© ÏÇ¨Î°Ä</Text>
                        <Stack gap="md">
                            <Paper
                                p="md"
                                style={{
                                    background: computedColorScheme === 'light'
                                        ? 'rgba(249, 250, 251, 0.8)'
                                        : 'rgba(40, 40, 40, 0.8)',
                                    borderRadius: '12px',
                                    border: computedColorScheme === 'light'
                                        ? '1px solid rgba(0, 0, 0, 0.05)'
                                        : '1px solid rgba(255, 255, 255, 0.05)'
                                }}
                            >
                                <Text fw={600} mb="xs">Ïä§ÌÅ¨Î°§ Í∏∞Î∞ò Ïä§ÌÜ†Î¶¨ÌÖîÎßÅ</Text>
                                <Text size="sm" style={{ lineHeight: 1.6 }}>
                                    Ïä§ÌÅ¨Î°§ÌÖîÎßÅÏùÄ Îã®ÏàúÌïú Ï†úÌíà Î∏åÎ°úÏÖîÎ•º ÎÑòÏñ¥ Ï†úÌíà Î™®ÌóòÏúºÎ°ú ÏßÑÌôîÌïòÍ≥† ÏûàÏäµÎãàÎã§.
                                    Ìå®Îü¥ÎûôÏä§ Ïä§ÌÅ¨Î°§ÎßÅÍ≥º Ï§å Ïù∏ Ìö®Í≥ºÎ•º ÌÜµÌï¥ ÎçîÏö± Î™∞ÏûÖÏ†ÅÏù∏ Í≤ΩÌóòÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.
                                </Text>
                            </Paper>

                            <Paper
                                p="md"
                                style={{
                                    background: computedColorScheme === 'light'
                                        ? 'rgba(249, 250, 251, 0.8)'
                                        : 'rgba(40, 40, 40, 0.8)',
                                    borderRadius: '12px',
                                    border: computedColorScheme === 'light'
                                        ? '1px solid rgba(0, 0, 0, 0.05)'
                                        : '1px solid rgba(255, 255, 255, 0.05)'
                                }}
                            >
                                <Text fw={600} mb="xs">ÏßÄÏÜçÍ∞ÄÎä•Ìïú Ïõπ ÎîîÏûêÏù∏</Text>
                                <Text size="sm" style={{ lineHeight: 1.6 }}>
                                    2025ÎÖÑ Ïõπ ÏßÄÏÜçÍ∞ÄÎä•ÏÑ±ÏùÄ Í∏∞Î≥∏ ÏµúÏ†ÅÌôîÎ•º ÎÑòÏñ¥ ÌôòÍ≤Ω ÏπúÌôîÏ†Å ÏõπÏÇ¨Ïù¥Ìä∏ Ï∞ΩÏ°∞Ïóê ÏßëÏ§ëÌï©ÎãàÎã§.
                                    Ïù¥Îäî Îçî Îπ†Î•¥Í≥† Ìö®Ïú®Ï†ÅÏù∏ ÏõπÏÇ¨Ïù¥Ìä∏Î°ú Ïù¥Ïñ¥Ï†∏ ÏÇ¨Ïö©Ïûê Í≤ΩÌóòÍ≥º ÌôòÍ≤Ω Ï±ÖÏûÑÏùò ÏôÑÎ≤ΩÌïú Ï°∞ÌôîÎ•º Ïù¥Î£πÎãàÎã§.
                                </Text>
                            </Paper>
                        </Stack>
                    </section>

                    <Divider />

                    <section id="conclusion">
                        <Text size="lg" fw={600} mb="md">ÎßàÎ¨¥Î¶¨</Text>
                        <Text style={{ lineHeight: 1.8 }}>
                            2025ÎÖÑ Ïõπ ÎîîÏûêÏù∏ Ìä∏Î†åÎìúÎäî Ï†ÑÌÜµÏ†ÅÏù∏ Í∑úÏπôÏùÑ Íπ®Îú®Î¶¨Îäî Í≤ÉÏóê Í¥ÄÌïú Í≤ÉÏûÖÎãàÎã§.
                            ÌïòÏßÄÎßå Ïù¥Îü¨Ìïú ÌòÅÏã†ÏùÄ Ìï≠ÏÉÅ ÏÇ¨Ïö©Ïûê Ï§ëÏã¨Ï†ÅÏù¥Ïñ¥Ïïº ÌïòÎ©∞, Ï†ëÍ∑ºÏÑ±Í≥º ÏÇ¨Ïö©ÏÑ±ÏùÑ Ìù¨ÏÉùÌïòÏßÄ ÏïäÎäî ÏÑ†ÏóêÏÑú Ïù¥Î£®Ïñ¥Ï†∏Ïïº Ìï©ÎãàÎã§.
                        </Text>
                    </section>

                    <Divider />

                    {/* ÌÉúÍ∑∏ ÏÑπÏÖò */}
                    <Group gap="xs">
                        {post.tags.map((tag) => (
                            <Badge key={tag} variant="light" size="md">
                                #{tag}
                            </Badge>
                        ))}
                    </Group>

                    {/* ÎåìÍ∏Ä ÏÑπÏÖò */}
                    <section id="comments">
                        <Group justify="space-between" align="center" mb="md">
                            <Text size="lg" fw={600}>ÎåìÍ∏Ä</Text>
                            <Group gap={4}>
                                <IconMessageCircle size={16} />
                                <Text size="sm" c="dimmed">24Í∞ú</Text>
                            </Group>
                        </Group>
                        {/*<CommentForm onSubmit={handleCommentSubmit} />*/}
                        <Paper
                            p="lg"
                            style={{
                                background: computedColorScheme === 'light'
                                    ? 'rgba(249, 250, 251, 0.8)'
                                    : 'rgba(40, 40, 40, 0.8)',
                                borderRadius: '12px',
                                border: computedColorScheme === 'light'
                                    ? '1px solid rgba(0, 0, 0, 0.05)'
                                    : '1px solid rgba(255, 255, 255, 0.05)'
                            }}
                        >
                            <Text c="dimmed" ta="center">
                                ÎåìÍ∏Ä ÏãúÏä§ÌÖúÏù¥ Í≥ß Ï∂îÍ∞ÄÎê† ÏòàÏ†ïÏûÖÎãàÎã§.
                            </Text>
                        </Paper>
                    </section>
                </Stack>
            </Container>

            {/* Ìè¨Ïä§Ìä∏ ÎÑ§ÎπÑÍ≤åÏù¥ÌÑ∞ */}
            <PostNavigator
                currentProgress={scrollProgress}
                onScrollTo={handleScrollTo}
            />

            {/* ÌîåÎ°úÌåÖ Ïï°ÏÖò Î≤ÑÌäºÎì§ */}
            <FloatingActions />
        </Box>
    );
}