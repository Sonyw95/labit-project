// 카테고리별 색상 매핑import React, { useState } from 'react';
import {
    Card,
    Text,
    Badge,
    Group,
    Stack,
    Avatar,
    ActionIcon,
    Image,
    Grid,
    Box,
    Container,
    Transition,
    Tooltip,
    useMantineColorScheme,
    useComputedColorScheme
} from '@mantine/core';
import {IconBookmark, IconChevronRight, IconEye, IconHeart, IconMoon, IconShare, IconSun} from "@tabler/icons-react";
import {useState} from "react";

// 샘플 포스트 데이터
const samplePosts = [
    {
        id: 1,
        title: "모바일 앱 UI/UX 디자인 트렌드 2025",
        excerpt: "2025년에 주목해야 할 모바일 앱 디자인 트렌드와 사용자 경험 개선 방법을 살펴보겠습니다.",
        image: "https://images.unsplash.com/photo-1611224923853-80b023f02d71?w=400&h=250&fit=crop",
        author: {
            name: "김디자이너",
            avatar: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=40&h=40&fit=crop&crop=face"
        },
        category: "디자인",
        readTime: "5분",
        views: 1250,
        likes: 89,
        createdAt: "2025-06-24",
        tags: ["UI/UX", "모바일", "트렌드"]
    },
    {
        id: 2,
        title: "React와 TypeScript로 만드는 모던 웹 애플리케이션",
        excerpt: "실무에서 바로 사용할 수 있는 React와 TypeScript 베스트 프랙티스를 공유합니다.",
        image: "https://images.unsplash.com/photo-1633356122544-f134324a6cee?w=400&h=250&fit=crop",
        author: {
            name: "박개발자",
            avatar: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=40&h=40&fit=crop&crop=face"
        },
        category: "개발",
        readTime: "8분",
        views: 2100,
        likes: 156,
        createdAt: "2025-06-23",
        tags: ["React", "TypeScript", "JavaScript"]
    },
    {
        id: 3,
        title: "AI와 머신러닝이 바꾸는 웹 개발의 미래",
        excerpt: "인공지능 기술이 웹 개발에 미치는 영향과 개발자가 준비해야 할 역량에 대해 알아봅니다.",
        image: "https://images.unsplash.com/photo-1677442136019-21780ecad995?w=400&h=250&fit=crop",
        author: {
            name: "이엔지니어",
            avatar: "https://images.unsplash.com/photo-1494790108755-2616b612b786?w=40&h=40&fit=crop&crop=face"
        },
        category: "AI/ML",
        readTime: "12분",
        views: 3420,
        likes: 234,
        createdAt: "2025-06-22",
        tags: ["AI", "머신러닝", "웹개발"]
    },
    {
        id: 4,
        title: "성능 최적화를 위한 Next.js 14 활용법",
        excerpt: "Next.js 14의 새로운 기능들을 활용하여 웹 애플리케이션의 성능을 극대화하는 방법을 알아봅니다.",
        image: "https://images.unsplash.com/photo-1627398242454-45a1465c2479?w=400&h=250&fit=crop",
        author: {
            name: "최프론트",
            avatar: "https://images.unsplash.com/photo-1527980965255-d3b416303d12?w=40&h=40&fit=crop&crop=face"
        },
        category: "프레임워크",
        readTime: "10분",
        views: 1890,
        likes: 145,
        createdAt: "2025-06-21",
        tags: ["Next.js", "성능", "최적화"]
    },
    {
        id: 5,
        title: "클라우드 네이티브 애플리케이션 개발 가이드",
        excerpt: "컨테이너와 마이크로서비스 아키텍처를 활용한 클라우드 네이티브 애플리케이션 개발 방법론을 소개합니다.",
        image: "https://images.unsplash.com/photo-1544197150-b99a580bb7a8?w=400&h=250&fit=crop",
        author: {
            name: "정클라우드",
            avatar: "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=40&h=40&fit=crop&crop=face"
        },
        category: "클라우드",
        readTime: "15분",
        views: 987,
        likes: 67,
        createdAt: "2025-06-20",
        tags: ["클라우드", "컨테이너", "마이크로서비스"]
    },
    {
        id: 6,
        title: "사이버 보안 트렌드와 개발자가 알아야 할 것들",
        excerpt: "최신 사이버 보안 위협과 개발 과정에서 고려해야 할 보안 요소들을 정리했습니다.",
        image: "https://images.unsplash.com/photo-1550751827-4bd374c3f58b?w=400&h=250&fit=crop",
        author: {
            name: "홍보안",
            avatar: "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=40&h=40&fit=crop&crop=face"
        },
        category: "보안",
        readTime: "7분",
        views: 1567,
        likes: 92,
        createdAt: "2025-06-19",
        tags: ["보안", "사이버", "개발"]
    }
];

// 다크 모드 토글 컴포넌트
function DarkModeToggle() {
    const { setColorScheme } = useMantineColorScheme();
    const computedColorScheme = useComputedColorScheme('light', { getInitialValueInEffect: true });
    const [isHovered, setIsHovered] = useState(false);

    const toggleColorScheme = () => {
        setColorScheme(computedColorScheme === 'light' ? 'dark' : 'light');
    };

    return (
        <Tooltip
            label={computedColorScheme === 'light' ? '다크 모드로 전환' : '라이트 모드로 전환'}
            position="bottom"
        >
            <ActionIcon
                onClick={toggleColorScheme}
                variant="gradient"
                gradient={
                    computedColorScheme === 'light'
                        ? { from: 'indigo', to: 'purple', deg: 135 }
                        : { from: 'yellow', to: 'orange', deg: 135 }
                }
                size="xl"
                style={{
                    position: 'fixed',
                    top: '20px',
                    right: '20px',
                    zIndex: 1000,
                    border: `2px solid ${computedColorScheme === 'light' ? 'rgba(255,255,255,0.2)' : 'rgba(0,0,0,0.2)'}`,
                    backdropFilter: 'blur(10px)',
                    boxShadow: computedColorScheme === 'light'
                        ? '0 8px 32px rgba(0, 0, 0, 0.15)'
                        : '0 8px 32px rgba(255, 255, 255, 0.1)',
                    transform: isHovered ? 'scale(1.1) rotate(180deg)' : 'scale(1) rotate(0deg)',
                    transition: 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)',
                }}
                onMouseEnter={() => setIsHovered(true)}
                onMouseLeave={() => setIsHovered(false)}
                aria-label="색상 테마 전환"
            >
                {computedColorScheme === 'light' ? (
                    <IconMoon
                        size={20}
                        style={{
                            transition: 'all 0.3s ease',
                            filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.2))'
                        }}
                    />
                ) : (
                    <IconSun
                        size={20}
                        style={{
                            transition: 'all 0.3s ease',
                            filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.2))'
                        }}
                    />
                )}
            </ActionIcon>
        </Tooltip>
    );
}
const categoryColors = {
    "디자인": "violet",
    "개발": "blue",
    "AI/ML": "orange",
    "프레임워크": "green",
    "클라우드": "cyan",
    "보안": "red"
};

function PostCard({ post, index }) {
    const [isHovered, setIsHovered] = useState(false);
    const [isLiked, setIsLiked] = useState(false);
    const [isBookmarked, setIsBookmarked] = useState(false);
    const computedColorScheme = useComputedColorScheme('light');

    return (
        <Transition
            mounted={true}
            transition="slide-up"
            duration={300}
            timingFunction="ease-out"
            enterDelay={index * 100}
        >
            {(styles) => (
                <Card
                    style={{
                        ...styles,
                        transform: isHovered ? 'translateY(-8px) scale(1.02)' : 'translateY(0) scale(1)',
                        transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                        cursor: 'pointer',
                        borderRadius: '24px',
                        overflow: 'hidden',
                        boxShadow: isHovered
                            ? computedColorScheme === 'light'
                                ? '0 25px 50px -12px rgba(0, 0, 0, 0.25), 0 0 0 1px rgba(255, 255, 255, 0.1)'
                                : '0 25px 50px -12px rgba(255, 255, 255, 0.15), 0 0 0 1px rgba(255, 255, 255, 0.2)'
                            : computedColorScheme === 'light'
                                ? '0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 0 0 1px rgba(255, 255, 255, 0.05)'
                                : '0 10px 25px -5px rgba(255, 255, 255, 0.05), 0 0 0 1px rgba(255, 255, 255, 0.1)',
                        background: computedColorScheme === 'light'
                            ? 'linear-gradient(135deg, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.8) 100%)'
                            : 'linear-gradient(135deg, rgba(30, 30, 30, 0.95) 0%, rgba(20, 20, 20, 0.9) 100%)',
                        backdropFilter: 'blur(20px)',
                        border: computedColorScheme === 'light'
                            ? '1px solid rgba(255, 255, 255, 0.2)'
                            : '1px solid rgba(255, 255, 255, 0.1)'
                    }}
                    p={0}
                    onMouseEnter={() => setIsHovered(true)}
                    onMouseLeave={() => setIsHovered(false)}
                >
                    {/* 이미지 섹션 */}
                    <Box style={{ position: 'relative', overflow: 'hidden' }}>
                        <Image
                            src={post.image}
                            alt={post.title}
                            height={200}
                            style={{
                                transform: isHovered ? 'scale(1.1)' : 'scale(1)',
                                transition: 'transform 0.6s cubic-bezier(0.4, 0, 0.2, 1)',
                                filter: isHovered ? 'brightness(1.1)' : 'brightness(1)'
                            }}
                        />

                        {/* 그라디언트 오버레이 */}
                        <Box
                            style={{
                                position: 'absolute',
                                top: 0,
                                left: 0,
                                right: 0,
                                bottom: 0,
                                background: computedColorScheme === 'light'
                                    ? 'linear-gradient(180deg, rgba(0,0,0,0) 0%, rgba(0,0,0,0.1) 50%, rgba(0,0,0,0.3) 100%)'
                                    : 'linear-gradient(180deg, rgba(0,0,0,0) 0%, rgba(0,0,0,0.3) 50%, rgba(0,0,0,0.6) 100%)',
                                pointerEvents: 'none'
                            }}
                        />

                        {/* 카테고리 배지 */}
                        <Badge
                            color={categoryColors[post.category]}
                            variant="filled"
                            size="sm"
                            style={{
                                position: 'absolute',
                                top: 12,
                                left: 12,
                                backdropFilter: 'blur(10px)',
                                background: `rgba(var(--mantine-color-${categoryColors[post.category]}-6-rgb), 0.9)`,
                                border: '1px solid rgba(255, 255, 255, 0.2)',
                                textShadow: '0 1px 2px rgba(0, 0, 0, 0.3)'
                            }}
                        >
                            {post.category}
                        </Badge>

                        {/* 북마크 버튼 */}
                        <ActionIcon
                            variant="filled"
                            color={isBookmarked ? "yellow" : "gray"}
                            size="md"
                            style={{
                                position: 'absolute',
                                top: 12,
                                right: 12,
                                backdropFilter: 'blur(10px)',
                                background: isBookmarked
                                    ? 'rgba(var(--mantine-color-yellow-6-rgb), 0.9)'
                                    : computedColorScheme === 'light'
                                        ? 'rgba(0, 0, 0, 0.6)'
                                        : 'rgba(255, 255, 255, 0.15)',
                                border: '1px solid rgba(255, 255, 255, 0.2)',
                                transform: isHovered ? 'scale(1.1)' : 'scale(1)',
                                transition: 'all 0.2s ease'
                            }}
                            onClick={(e) => {
                                e.stopPropagation();
                                setIsBookmarked(!isBookmarked);
                            }}
                        >
                            <IconBookmark size={16} />
                        </ActionIcon>
                    </Box>

                    {/* 콘텐츠 섹션 */}
                    <Stack gap="md" p="lg">
                        {/* 제목 */}
                        <Text
                            size="lg"
                            fw={700}
                            lineClamp={2}
                            style={{
                                background: computedColorScheme === 'light'
                                    ? 'linear-gradient(135deg, var(--mantine-color-text) 0%, var(--mantine-color-dimmed) 100%)'
                                    : 'linear-gradient(135deg, var(--mantine-color-white) 0%, var(--mantine-color-gray-3) 100%)',
                                backgroundClip: 'text',
                                WebkitBackgroundClip: 'text',
                                color: 'transparent',
                                fontSize: 'clamp(1rem, 2.5vw, 1.25rem)'
                            }}
                        >
                            {post.title}
                        </Text>

                        {/* 요약 */}
                        <Text
                            size="sm"
                            c="dimmed"
                            lineClamp={2}
                            style={{ lineHeight: 1.6 }}
                        >
                            {post.excerpt}
                        </Text>

                        {/* 태그 */}
                        <Group gap="xs">
                            {post.tags.map((tag, tagIndex) => (
                                <Badge
                                    key={tagIndex}
                                    variant="light"
                                    size="xs"
                                    color={categoryColors[post.category]}
                                    style={{
                                        background: computedColorScheme === 'light'
                                            ? `rgba(var(--mantine-color-${categoryColors[post.category]}-1-rgb), 0.5)`
                                            : `rgba(var(--mantine-color-${categoryColors[post.category]}-9-rgb), 0.3)`,
                                        border: computedColorScheme === 'light'
                                            ? `1px solid rgba(var(--mantine-color-${categoryColors[post.category]}-3-rgb), 0.3)`
                                            : `1px solid rgba(var(--mantine-color-${categoryColors[post.category]}-6-rgb), 0.5)`,
                                        backdropFilter: 'blur(5px)'
                                    }}
                                >
                                    #{tag}
                                </Badge>
                            ))}
                        </Group>

                        {/* 작성자 정보 및 메타데이터 */}
                        <Group justify="space-between" align="center">
                            <Group gap="xs">
                                <Avatar
                                    src={post.author.avatar}
                                    alt={post.author.name}
                                    size="sm"
                                    style={{
                                        border: '2px solid rgba(255, 255, 255, 0.2)',
                                        boxShadow: '0 2px 8px rgba(0, 0, 0, 0.1)'
                                    }}
                                />
                                <Stack gap={2}>
                                    <Text size="xs" fw={500}>{post.author.name}</Text>
                                    <Text size="xs" c="dimmed">{post.readTime} 읽기</Text>
                                </Stack>
                            </Group>

                            {/* 인터랙션 버튼들 */}
                            <Group gap="xs">
                                <Group gap={4}>
                                    <ActionIcon
                                        variant="subtle"
                                        size="sm"
                                        color={isLiked ? "red" : "gray"}
                                        onClick={(e) => {
                                            e.stopPropagation();
                                            setIsLiked(!isLiked);
                                        }}
                                        style={{
                                            transform: isLiked ? 'scale(1.2)' : 'scale(1)',
                                            transition: 'transform 0.2s ease'
                                        }}
                                    >
                                        <IconHeart size={14} fill={isLiked ? "currentColor" : "none"} />
                                    </ActionIcon>
                                    <Text size="xs" c="dimmed">{post.likes}</Text>
                                </Group>

                                <Group gap={4}>
                                    <ActionIcon variant="subtle" size="sm" color="gray">
                                        <IconEye size={14} />
                                    </ActionIcon>
                                    <Text size="xs" c="dimmed">{post.views}</Text>
                                </Group>

                                <Tooltip label="공유하기">
                                    <ActionIcon variant="subtle" size="sm" color="gray">
                                        <IconShare size={14} />
                                    </ActionIcon>
                                </Tooltip>
                            </Group>
                        </Group>

                        {/* 읽기 더보기 버튼 */}
                        <Group
                            justify="space-between"
                            align="center"
                            style={{
                                marginTop: 'auto',
                                paddingTop: '8px',
                                borderTop: '1px solid rgba(255, 255, 255, 0.1)'
                            }}
                        >
                            <Text size="xs" c="dimmed">{post.createdAt}</Text>
                            <Group gap={4} c="blue">
                                <Text size="sm" fw={500}>자세히 보기</Text>
                                <IconChevronRight
                                    size={16}
                                    style={{
                                        transform: isHovered ? 'translateX(4px)' : 'translateX(0)',
                                        transition: 'transform 0.2s ease'
                                    }}
                                />
                            </Group>
                        </Group>
                    </Stack>
                </Card>
            )}
        </Transition>
    );
}

export default function PostCardList() {
    const [filter, setFilter] = useState('all');
    const computedColorScheme = useComputedColorScheme('light');

    const filteredPosts = filter === 'all'
        ? samplePosts
        : samplePosts.filter(post => post.category === filter);

    const categories = ['all', ...Object.keys(categoryColors)];

    return (
        <>
            {/* 다크 모드 토글 버튼 */}
            <DarkModeToggle />

            <Container size="xl" py="xl">
                {/* 헤더 섹션 */}
                <Stack gap="xl" mb="xl">
                    <Box ta="center">
                        <Text
                            size="3rem"
                            fw={900}
                            style={{
                                background: computedColorScheme === 'light'
                                    ? 'linear-gradient(135deg, var(--mantine-color-blue-6), var(--mantine-color-violet-6), var(--mantine-color-orange-6))'
                                    : 'linear-gradient(135deg, var(--mantine-color-blue-4), var(--mantine-color-violet-4), var(--mantine-color-orange-4))',
                                backgroundClip: 'text',
                                WebkitBackgroundClip: 'text',
                                color: 'transparent',
                                fontSize: 'clamp(2rem, 5vw, 3rem)',
                                textShadow: computedColorScheme === 'light'
                                    ? '0 4px 20px rgba(0, 0, 0, 0.1)'
                                    : '0 4px 20px rgba(255, 255, 255, 0.1)'
                            }}
                        >
                            Latest Posts
                        </Text>
                        <Text
                            size="lg"
                            c="dimmed"
                            mt="sm"
                            style={{
                                fontSize: 'clamp(1rem, 2vw, 1.25rem)',
                                maxWidth: '600px',
                                margin: '0 auto'
                            }}
                        >
                            최신 기술 트렌드와 인사이트를 담은 포스트들을 만나보세요
                        </Text>
                    </Box>

                    {/* 필터 버튼들 */}
                    <Group justify="center" gap="xs">
                        {categories.map((category) => (
                            <Badge
                                key={category}
                                variant={filter === category ? "filled" : "light"}
                                color={category === 'all' ? 'gray' : categoryColors[category]}
                                size="lg"
                                style={{
                                    cursor: 'pointer',
                                    padding: '8px 16px',
                                    fontSize: '14px',
                                    fontWeight: 500,
                                    border: `1px solid ${
                                        filter === category
                                            ? `var(--mantine-color-${category === 'all' ? 'gray' : categoryColors[category]}-6)`
                                            : computedColorScheme === 'light'
                                                ? 'rgba(0, 0, 0, 0.1)'
                                                : 'rgba(255, 255, 255, 0.2)'
                                    }`,
                                    backdropFilter: 'blur(10px)',
                                    transition: 'all 0.2s ease',
                                    transform: filter === category ? 'scale(1.05)' : 'scale(1)',
                                    background: filter === category
                                        ? undefined
                                        : computedColorScheme === 'light'
                                            ? 'rgba(255, 255, 255, 0.8)'
                                            : 'rgba(30, 30, 30, 0.8)'
                                }}
                                onClick={() => setFilter(category)}
                            >
                                {category === 'all' ? '전체' : category}
                            </Badge>
                        ))}
                    </Group>
                </Stack>

                {/* 포스트 그리드 */}
                <Grid gutter="lg">
                    {filteredPosts.map((post, index) => (
                        <Grid.Col
                            key={post.id}
                            span={{ base: 12, sm: 6, lg: 4 }}
                        >
                            <PostCard post={post} index={index} />
                        </Grid.Col>
                    ))}
                </Grid>

                {/* 더 보기 버튼 */}
                <Group justify="center" mt="xl">
                    <Badge
                        variant="gradient"
                        gradient={{ from: 'blue', to: 'violet', deg: 135 }}
                        size="xl"
                        style={{
                            cursor: 'pointer',
                            padding: '12px 32px',
                            fontSize: '16px',
                            fontWeight: 600,
                            border: '1px solid rgba(255, 255, 255, 0.2)',
                            backdropFilter: 'blur(10px)',
                            transition: 'all 0.3s ease',
                            boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)'
                        }}
                        onMouseEnter={(e) => {
                            e.target.style.transform = 'scale(1.05)';
                            e.target.style.boxShadow = '0 8px 30px rgba(0, 0, 0, 0.2)';
                        }}
                        onMouseLeave={(e) => {
                            e.target.style.transform = 'scale(1)';
                            e.target.style.boxShadow = '0 4px 20px rgba(0, 0, 0, 0.1)';
                        }}
                    >
                        더 많은 포스트 보기
                    </Badge>
                </Group>
            </Container>
        </>
    );
}